package com.example.veterinariav2

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController

import com.example.veterinariav2.data.RetrofitClient
import com.example.veterinariav2.model.Owner
import com.example.veterinariav2.model.Pets
import com.example.veterinariav2.ui.theme.VeterinariaV2Theme
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            VeterinariaV2Theme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val navController = rememberNavController() // Crea el NavController
                    NavHost(navController = navController, startDestination = "login") {
                        // Destino de navegación para la pantalla de inicio de sesión
                        composable("login") {
                            LoginScreen(navController = navController)
                        }
                        // Destino de navegación para la pantalla de lista de mascotas
                        composable("petsList") {
                            PetsListScreen()
                        }
                    }
                }
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun LoginScreen(navController: NavController) {
        var username by remember { mutableStateOf("") }
        var password by remember { mutableStateOf("") }
        var message by remember { mutableStateOf("") }

        val context = LocalContext.current
        val focusManager = LocalFocusManager.current
        val passwordFocusRequester = remember { FocusRequester() }

        var owners by remember { mutableStateOf<List<Owner>>(emptyList()) }

        LaunchedEffect(Unit) {
            // Obtener la lista de propietarios utilizando Retrofit
            owners = RetrofitClient.ownerService.getOwners().body() ?: emptyList()
        }

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            TextField(
                value = username,
                onValueChange = { username = it },
                label = { Text("Mail") },
                modifier = Modifier.padding(16.dp),
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
                keyboardActions = KeyboardActions(
                    onNext = { passwordFocusRequester.requestFocus() }
                )
            )

            TextField(
                value = password,
                onValueChange = { password = it },
                label = { Text("Password") },
                modifier = Modifier.padding(16.dp),
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
                keyboardActions = KeyboardActions(
                    onDone = { focusManager.clearFocus() }
                ),
                visualTransformation = PasswordVisualTransformation(),
                isError = password.isEmpty(), // Valida si la contraseña está vacía
            )

            Column(
                modifier = Modifier.fillMaxWidth(), // Asegura que el botón ocupe todo el ancho
                horizontalAlignment = Alignment.CenterHorizontally // Centra el botón horizontalmente
            ) {
                Button(
                    onClick = {
                        // Verificar los datos con la lista de propietarios
                        val user =
                            owners.find { it.correo == username && it.contrasena == password }
                        if (user != null) {
                            // Mostrar ventana emergente si el inicio de sesión es exitoso
                            message = "Login successful"
                            navController.navigate("petsList")
                        } else {
                            message = "Login failed: Invalid username or password"
                        }
                    },
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text("Login")
                }
            }

            // Muestra el mensaje de carga o el mensaje de resultado del login
            Text(
                text = message,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }
    }
}
